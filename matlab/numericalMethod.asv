function [velocity_return, position_return] = numericalMethod(x, y, step_size, acceleration, velocity, position, method)

switch method
   case 'euler' %Eulers method
      velocity_return = velocity(x-1,y) + acceleration*step_size;
      position_return = position(x-1,y) + velocity_return*step_size;
    
    case 'runge-kutta' %Runge-Kutta method
    
    velocity_return = velocity(x-1,y) + acceleration*step_size;
    
    %Anonymous fuction
    F_xy=@(x,y) x+y*step_size;
   
    k1 = F_xy(velocity_return,position(x-1,y));
    k2 = F_xy(velocity_return+0.5*step_size,position(x-1,y)+0.5*step_size*k1);
    k3 = F_xy(velocity_return+0.5*step_size,(position(x-1,y)+0.5*step_size*k2));
    k4 = F_xy(velocity_return+step_size, position(x-1,y)+k3*step_size);
    
    position_return = position(x-1,y) + (1/6)*(k1+2*k2+2*k3+k4)*step_size;
 
    case 'bw-euler'
        
    
   otherwise
    disp("Error, Method not found")
end

end

